"""
Django settings for jiboia project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from pathlib import Path

import dj_database_url
from decouple import Csv, config
from django.core.management.utils import get_random_secret_key

BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default=get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = config(
    "ALLOWED_HOSTS",
    default="jiboia.fly.dev",
    cast=Csv(),
)

CSRF_TRUSTED_ORIGINS = config(
    "CSRF_TRUSTED_ORIGINS",
    default="https://jiboia.fly.dev",
    cast=Csv(),
)


# Application definition
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "django_extensions",
    "django_crontab",
]

LOCAL_APPS = [
    "jiboia.base",
    "jiboia.accounts",
    "jiboia.core",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "jiboia.base.middlewares.CsrfTokenExemptionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "jiboia.base.middlewares.DjavueApiErrorHandlingMiddleware",
]


ROOT_URLCONF = "jiboia.jiboia.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "jiboia.jiboia.wsgi.application"

AUTH_USER_MODEL = "accounts.User"

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASE_URL = config("DATABASE_URL")

DATABASES = {
    "default": dj_database_url.parse(
        DATABASE_URL,
        conn_max_age=600,
        conn_health_checks=True,
    )
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = config("LANGUAGE_CODE", default="pt-br")

TIME_ZONE = config("TIME_ZONE", default="UTC")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = config("DJANGO_STATIC_ROOT", default=os.path.join(BASE_DIR.parent, "static"))

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOG_LEVEL = config("LOG_LEVEL", default="INFO")

DEFAULT_FORMATTER_CONFIG = {
    "format": "{levelname} {asctime} {module}:{lineno} {process:d} {message}",
    "style": "{",
}

BASE_STREAM_HANDLER = {
    "class": "logging.StreamHandler",
    "formatter": "verbose",
}

BASE_LOGGER_CONFIG = {
    "level": LOG_LEVEL,
    "handlers": [
        "console",
    ],
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": DEFAULT_FORMATTER_CONFIG,
        "console": DEFAULT_FORMATTER_CONFIG,
        "django": DEFAULT_FORMATTER_CONFIG,
    },
    "handlers": {
        "console": BASE_STREAM_HANDLER,
        "django": BASE_STREAM_HANDLER,
    },
    "loggers": {"": BASE_LOGGER_CONFIG, "django.server": BASE_LOGGER_CONFIG},
}

# Configurações da API do Jira
JIRA_API_EMAIL = config("JIRA_API_EMAIL", default="")
JIRA_API_TOKEN = config("JIRA_API_TOKEN", default="")
JIRA_API_URL = config("JIRA_API_URL", default="https://necto.atlassian.net")

# Configuração do django-crontab

# Cron jobs configuration
CRONJOBS = [
    # Healthcheck at midnight (existing)
    (
        "0 0 * * *",
        "jiboia.core.cron.jira_healthcheck",
        ">> /tmp/jira_healthcheck.log 2>&1",
        {},
        "jira_daily_healthcheck",
    ),
    # New: Sync issues for all projects at 3 AM (separate flow)
    (
        "0 1 * * *",
        "jiboia.core.cron.jira_sync_issues_all_projects",
        ">> /tmp/jira_sync_issues.log 2>&1",
        {},
        "jira_sync_issues_all_projects",
    ),
    ("0 2 * * *", "jiboia.core.cron.jira_project", ">> /tmp/jira_project.log 2>&1", {}, "jira_daily_project"),
    (
        "0 3 * * *",
        "jiboia.core.cron.dimensional_load_daily",
        ">> /tmp/dimensional_load_daily.log 2>&1",
        {},
        "load_dimenssional_daily",
    ),
]


CRONTAB_COMMAND_PREFIX = "DJANGO_SETTINGS_MODULE=jiboia.jiboia.settings"
