services:

  backend:
    image: back-jiboia
    hostname: back-jiboia
    build:
      context: ./
      dockerfile: Dockerfile
    environment:
      JIRA_API_URL: ${JIRA_API_URL}
      JIRA_API_EMAIL: ${JIRA_API_EMAIL}
      JIRA_API_TOKEN: ${JIRA_API_TOKEN}
    env_file:
      - .env
    command: bash -c "uv venv --python $(which python3) && source .venv/bin/activate && uv pip install --no-cache -r requirements-dev.txt && python manage.py migrate --noinput && python manage.py collectstatic --noinput && service cron start && python manage.py crontab remove && python manage.py crontab add && python manage.py runserver 0.0.0.0:8000"

    ports:
      - 8000:8000
    expose:
      - "8000"
    volumes:
      - ./:/app
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: "postgres:15-alpine"
    ports:
      - 15432:5432
    expose:
      - "15432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    restart: on-failure
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $POSTGRES_DB -U $POSTGRES_USER"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      #- "./docker/postgres/pg_hba.conf:/usr/local/etc/postgres/postgres.conf"
      
     
  frontend:
    build:
      context: ./frontend
    image: front-jiboia
    hostname: front-jiboia
    ports:
      - 3000:3000
    expose:
      - "3000"
    env_file:
      - .env
    
    command: npm run dev -- --host
    volumes:
      - /frontend/node_modules
      - ./frontend:/frontend
    

  nginx:
    image: nginx
    ports:
      - 80:7999
    volumes:
      - ./docker/nginx/default_local:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend

volumes:
  postgres_data:
